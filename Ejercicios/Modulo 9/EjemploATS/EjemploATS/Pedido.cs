///////////////////////////////////////////////////////////
//  Pedido.cs
//  Implementation of the Class Pedido
//  Generated by Enterprise Architect
//  Created on:      14-oct-2010 10:10:52 p.m.
//  Original author: Victor
///////////////////////////////////////////////////////////




public class Pedido {

	private int Cantidad = 0;
	private int Estado = 0;
	private string FechaDescarga = "";
	private string FechaPedido = "";
	private int PedidoID = 0;
	private decimal Precio = 0;
	//public Abonado m_Abonado;
	//public Catalogo m_Catalogo;

	public Pedido(){

	}

	~Pedido(){

	}

	public virtual void Dispose(){

	}

	public void AgregarItem(){

	}

	public void Calcular_Pedido(){

	}

	public double CalcularPedido(){

		return 0;
	}

	public int cantidad{
		get;
		set;
	}

	public void EliminarItem(){

	}

	public int pedidoID{
		get;
		set;
	}

	public decimal precio{
		get;
		set;
	}

 
	/* Begin - EA generated code for Parts and Ports */

	public estadosPedido estados ;

	/* End - EA generated code for Parts and Ports */

	/* Begin - EA generated code for StateMachine */


	private enum StateType : int
	{
		ProcesoPedidos_entregado,
		ProcesoPedidos_encurso,
		ProcesoPedidos_iniciado,
		ProcesoPedidos_encolado,
		ProcesoPedidos_abortado,
		ST_NOSTATE
	}
	private enum TransitionType : int
	{
		TT_NOTRANSITION
	}
	private enum CommandType : int 
	{
		Do, 
		Entry, 
		Exit 
	}
	private StateType currState;
	private StateType nextState;
	private TransitionType currTransition;
	private bool transcend;
		private StateType ProcesoPedidos_history;	
	private void procesoPedidos_entregado(CommandType command)
	{
		switch(command)
		{
			case CommandType.Do:
			{
				// Do Behaviors..
				// State's Transitions
				nextState = StateType.ST_NOSTATE/*Final State*/;
				break;
			}
			default:
			{
				break;
			}
		}
	}

	private void procesoPedidos_encurso(CommandType command)
	{
		switch(command)
		{
			case CommandType.Do:
			{
				// Do Behaviors..
				currState = StateType.ProcesoPedidos_encurso;
				// State's Transitions
				nextState = StateType.ProcesoPedidos_encolado;
				break;
			}
			default:
			{
				break;
			}
		}
	}

	private void procesoPedidos_iniciado(CommandType command)
	{
		switch(command)
		{
			case CommandType.Do:
			{
				// Do Behaviors..
                currState = StateType.ProcesoPedidos_iniciado; 
				// State's Transitions
				nextState = StateType.ProcesoPedidos_encurso;
				break;
			}
			default:
			{
				break;
			}
		}
	}

	private void procesoPedidos_encolado(CommandType command)
	{
		switch(command)
		{
			case CommandType.Do:
			{
				// Do Behaviors..
				// State's Transitions
				nextState = StateType.ProcesoPedidos_entregado;
				nextState = StateType.ProcesoPedidos_abortado;
				break;
			}
			default:
			{
				break;
			}
		}
	}

	private void procesoPedidos_abortado(CommandType command)
	{
		switch(command)
		{
			case CommandType.Do:
			{
				// Do Behaviors..
				// State's Transitions
				nextState = StateType.ST_NOSTATE/*Final State*/;
				break;
			}
			default:
			{
				break;
			}
		}
	}
	private void StatesProc(StateType currState, CommandType command)
	{
		switch(currState)
		{
				case StateType.ProcesoPedidos_entregado:
			{
				procesoPedidos_entregado(command);
				break;
			}

			case StateType.ProcesoPedidos_encurso:
			{
				procesoPedidos_encurso(command);
				break;
			}

			case StateType.ProcesoPedidos_iniciado:
			{
				procesoPedidos_iniciado(command);
				break;
			}

			case StateType.ProcesoPedidos_encolado:
			{
				procesoPedidos_encolado(command);
				break;
			}

			case StateType.ProcesoPedidos_abortado:
			{
				procesoPedidos_abortado(command);
				break;
			}
			default:
				break;
		}
	}
	private void TransitionsProc(TransitionType transition)
	{
	}
	private void initializeStateMachine()
	{ 
		currState = StateType.ProcesoPedidos_iniciado;
		nextState = StateType.ST_NOSTATE;
		currTransition = TransitionType.TT_NOTRANSITION;
	} 
	

	private void runStateMachine()
	{
		while(true)
		{
			if ( currState == StateType.ST_NOSTATE )
			{
				break ; 
			}
			
			currTransition = TransitionType.TT_NOTRANSITION;
			StatesProc(currState, CommandType.Do);
			// and then check if there is any valid transition assigned after the do behavior
			if ( nextState == StateType.ST_NOSTATE)
			{
				break;
			}
			
			if ( currTransition != TransitionType.TT_NOTRANSITION )
			{
				TransitionsProc( currTransition );
			}
			if ( currState != nextState)
			{
				StatesProc(currState, CommandType.Exit);
				StatesProc(nextState, CommandType.Entry);
				currState = nextState ;
			}
		}
	}

	/* End - EA generated code for StateMachine */

}//end Pedido